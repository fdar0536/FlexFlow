// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: stq.proto

#include "stq.pb.h"
#include "stq.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* SimpleTaskQueue_method_names[] = {
  "/SimpleTaskQueue/Login",
  "/SimpleTaskQueue/Logout",
  "/SimpleTaskQueue/CreateQueue",
  "/SimpleTaskQueue/DeleteQueue",
  "/SimpleTaskQueue/ListQueue",
  "/SimpleTaskQueue/AddTask",
  "/SimpleTaskQueue/DeleteTask",
  "/SimpleTaskQueue/ListTask",
  "/SimpleTaskQueue/TaskState",
  "/SimpleTaskQueue/CurrentRunning",
  "/SimpleTaskQueue/StopCurrent",
  "/SimpleTaskQueue/StopAll",
  "/SimpleTaskQueue/CurrentTaskOutput",
  "/SimpleTaskQueue/ListExitedTask",
  "/SimpleTaskQueue/TaskExitState",
  "/SimpleTaskQueue/UploadHook",
  "/SimpleTaskQueue/DownloadLog",
};

std::unique_ptr< SimpleTaskQueue::Stub> SimpleTaskQueue::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SimpleTaskQueue::Stub> stub(new SimpleTaskQueue::Stub(channel, options));
  return stub;
}

SimpleTaskQueue::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Login_(SimpleTaskQueue_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logout_(SimpleTaskQueue_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateQueue_(SimpleTaskQueue_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteQueue_(SimpleTaskQueue_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListQueue_(SimpleTaskQueue_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddTask_(SimpleTaskQueue_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTask_(SimpleTaskQueue_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTask_(SimpleTaskQueue_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TaskState_(SimpleTaskQueue_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurrentRunning_(SimpleTaskQueue_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopCurrent_(SimpleTaskQueue_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopAll_(SimpleTaskQueue_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurrentTaskOutput_(SimpleTaskQueue_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListExitedTask_(SimpleTaskQueue_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TaskExitState_(SimpleTaskQueue_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadHook_(SimpleTaskQueue_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DownloadLog_(SimpleTaskQueue_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status SimpleTaskQueue::Stub::Login(::grpc::ClientContext* context, const ::LoginReq& request, ::ExitRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::LoginReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void SimpleTaskQueue::Stub::async::Login(::grpc::ClientContext* context, const ::LoginReq* request, ::ExitRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::LoginReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::Login(::grpc::ClientContext* context, const ::LoginReq* request, ::ExitRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::LoginReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ExitRes, ::LoginReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::LoginReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleTaskQueue::Stub::Logout(::grpc::ClientContext* context, const ::Inquiry& request, ::ExitRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Inquiry, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Logout_, context, request, response);
}

void SimpleTaskQueue::Stub::async::Logout(::grpc::ClientContext* context, const ::Inquiry* request, ::ExitRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Inquiry, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::Logout(::grpc::ClientContext* context, const ::Inquiry* request, ::ExitRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::Inquiry& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ExitRes, ::Inquiry, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Logout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::AsyncLogoutRaw(::grpc::ClientContext* context, const ::Inquiry& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleTaskQueue::Stub::CreateQueue(::grpc::ClientContext* context, const ::QueueReq& request, ::ExitRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::QueueReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateQueue_, context, request, response);
}

void SimpleTaskQueue::Stub::async::CreateQueue(::grpc::ClientContext* context, const ::QueueReq* request, ::ExitRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::QueueReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateQueue_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::CreateQueue(::grpc::ClientContext* context, const ::QueueReq* request, ::ExitRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateQueue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::PrepareAsyncCreateQueueRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ExitRes, ::QueueReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateQueue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::AsyncCreateQueueRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateQueueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleTaskQueue::Stub::DeleteQueue(::grpc::ClientContext* context, const ::QueueReq& request, ::ExitRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::QueueReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteQueue_, context, request, response);
}

void SimpleTaskQueue::Stub::async::DeleteQueue(::grpc::ClientContext* context, const ::QueueReq* request, ::ExitRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::QueueReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteQueue_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::DeleteQueue(::grpc::ClientContext* context, const ::QueueReq* request, ::ExitRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteQueue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::PrepareAsyncDeleteQueueRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ExitRes, ::QueueReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteQueue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::AsyncDeleteQueueRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteQueueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleTaskQueue::Stub::ListQueue(::grpc::ClientContext* context, const ::Inquiry& request, ::ListQueueRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Inquiry, ::ListQueueRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListQueue_, context, request, response);
}

void SimpleTaskQueue::Stub::async::ListQueue(::grpc::ClientContext* context, const ::Inquiry* request, ::ListQueueRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Inquiry, ::ListQueueRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListQueue_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::ListQueue(::grpc::ClientContext* context, const ::Inquiry* request, ::ListQueueRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListQueue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ListQueueRes>* SimpleTaskQueue::Stub::PrepareAsyncListQueueRaw(::grpc::ClientContext* context, const ::Inquiry& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ListQueueRes, ::Inquiry, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListQueue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ListQueueRes>* SimpleTaskQueue::Stub::AsyncListQueueRaw(::grpc::ClientContext* context, const ::Inquiry& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListQueueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleTaskQueue::Stub::AddTask(::grpc::ClientContext* context, const ::AddTaskReq& request, ::ExitRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AddTaskReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddTask_, context, request, response);
}

void SimpleTaskQueue::Stub::async::AddTask(::grpc::ClientContext* context, const ::AddTaskReq* request, ::ExitRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AddTaskReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddTask_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::AddTask(::grpc::ClientContext* context, const ::AddTaskReq* request, ::ExitRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::PrepareAsyncAddTaskRaw(::grpc::ClientContext* context, const ::AddTaskReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ExitRes, ::AddTaskReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::AsyncAddTaskRaw(::grpc::ClientContext* context, const ::AddTaskReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleTaskQueue::Stub::DeleteTask(::grpc::ClientContext* context, const ::TaskIDReq& request, ::ExitRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TaskIDReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteTask_, context, request, response);
}

void SimpleTaskQueue::Stub::async::DeleteTask(::grpc::ClientContext* context, const ::TaskIDReq* request, ::ExitRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TaskIDReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTask_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::DeleteTask(::grpc::ClientContext* context, const ::TaskIDReq* request, ::ExitRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::PrepareAsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::TaskIDReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ExitRes, ::TaskIDReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::AsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::TaskIDReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleTaskQueue::Stub::ListTask(::grpc::ClientContext* context, const ::QueueReq& request, ::ListTaskRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::QueueReq, ::ListTaskRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListTask_, context, request, response);
}

void SimpleTaskQueue::Stub::async::ListTask(::grpc::ClientContext* context, const ::QueueReq* request, ::ListTaskRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::QueueReq, ::ListTaskRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTask_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::ListTask(::grpc::ClientContext* context, const ::QueueReq* request, ::ListTaskRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ListTaskRes>* SimpleTaskQueue::Stub::PrepareAsyncListTaskRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ListTaskRes, ::QueueReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ListTaskRes>* SimpleTaskQueue::Stub::AsyncListTaskRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleTaskQueue::Stub::TaskState(::grpc::ClientContext* context, const ::TaskIDReq& request, ::TaskStateRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TaskIDReq, ::TaskStateRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TaskState_, context, request, response);
}

void SimpleTaskQueue::Stub::async::TaskState(::grpc::ClientContext* context, const ::TaskIDReq* request, ::TaskStateRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TaskIDReq, ::TaskStateRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TaskState_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::TaskState(::grpc::ClientContext* context, const ::TaskIDReq* request, ::TaskStateRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TaskState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TaskStateRes>* SimpleTaskQueue::Stub::PrepareAsyncTaskStateRaw(::grpc::ClientContext* context, const ::TaskIDReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TaskStateRes, ::TaskIDReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TaskState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TaskStateRes>* SimpleTaskQueue::Stub::AsyncTaskStateRaw(::grpc::ClientContext* context, const ::TaskIDReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTaskStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleTaskQueue::Stub::CurrentRunning(::grpc::ClientContext* context, const ::QueueReq& request, ::TaskStateRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::QueueReq, ::TaskStateRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurrentRunning_, context, request, response);
}

void SimpleTaskQueue::Stub::async::CurrentRunning(::grpc::ClientContext* context, const ::QueueReq* request, ::TaskStateRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::QueueReq, ::TaskStateRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurrentRunning_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::CurrentRunning(::grpc::ClientContext* context, const ::QueueReq* request, ::TaskStateRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurrentRunning_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TaskStateRes>* SimpleTaskQueue::Stub::PrepareAsyncCurrentRunningRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TaskStateRes, ::QueueReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurrentRunning_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TaskStateRes>* SimpleTaskQueue::Stub::AsyncCurrentRunningRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurrentRunningRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleTaskQueue::Stub::StopCurrent(::grpc::ClientContext* context, const ::QueueReq& request, ::ExitRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::QueueReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopCurrent_, context, request, response);
}

void SimpleTaskQueue::Stub::async::StopCurrent(::grpc::ClientContext* context, const ::QueueReq* request, ::ExitRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::QueueReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopCurrent_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::StopCurrent(::grpc::ClientContext* context, const ::QueueReq* request, ::ExitRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopCurrent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::PrepareAsyncStopCurrentRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ExitRes, ::QueueReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopCurrent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::AsyncStopCurrentRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopCurrentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleTaskQueue::Stub::StopAll(::grpc::ClientContext* context, const ::QueueReq& request, ::ExitRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::QueueReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopAll_, context, request, response);
}

void SimpleTaskQueue::Stub::async::StopAll(::grpc::ClientContext* context, const ::QueueReq* request, ::ExitRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::QueueReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopAll_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::StopAll(::grpc::ClientContext* context, const ::QueueReq* request, ::ExitRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::PrepareAsyncStopAllRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ExitRes, ::QueueReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ExitRes>* SimpleTaskQueue::Stub::AsyncStopAllRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleTaskQueue::Stub::CurrentTaskOutput(::grpc::ClientContext* context, const ::QueueReq& request, ::CurrentTaskOutputRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::QueueReq, ::CurrentTaskOutputRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurrentTaskOutput_, context, request, response);
}

void SimpleTaskQueue::Stub::async::CurrentTaskOutput(::grpc::ClientContext* context, const ::QueueReq* request, ::CurrentTaskOutputRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::QueueReq, ::CurrentTaskOutputRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurrentTaskOutput_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::CurrentTaskOutput(::grpc::ClientContext* context, const ::QueueReq* request, ::CurrentTaskOutputRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurrentTaskOutput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CurrentTaskOutputRes>* SimpleTaskQueue::Stub::PrepareAsyncCurrentTaskOutputRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CurrentTaskOutputRes, ::QueueReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurrentTaskOutput_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CurrentTaskOutputRes>* SimpleTaskQueue::Stub::AsyncCurrentTaskOutputRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurrentTaskOutputRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleTaskQueue::Stub::ListExitedTask(::grpc::ClientContext* context, const ::QueueReq& request, ::ListTaskRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::QueueReq, ::ListTaskRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListExitedTask_, context, request, response);
}

void SimpleTaskQueue::Stub::async::ListExitedTask(::grpc::ClientContext* context, const ::QueueReq* request, ::ListTaskRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::QueueReq, ::ListTaskRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListExitedTask_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::ListExitedTask(::grpc::ClientContext* context, const ::QueueReq* request, ::ListTaskRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListExitedTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ListTaskRes>* SimpleTaskQueue::Stub::PrepareAsyncListExitedTaskRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ListTaskRes, ::QueueReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListExitedTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ListTaskRes>* SimpleTaskQueue::Stub::AsyncListExitedTaskRaw(::grpc::ClientContext* context, const ::QueueReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListExitedTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleTaskQueue::Stub::TaskExitState(::grpc::ClientContext* context, const ::TaskIDReq& request, ::TaskExitStateRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TaskIDReq, ::TaskExitStateRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TaskExitState_, context, request, response);
}

void SimpleTaskQueue::Stub::async::TaskExitState(::grpc::ClientContext* context, const ::TaskIDReq* request, ::TaskExitStateRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TaskIDReq, ::TaskExitStateRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TaskExitState_, context, request, response, std::move(f));
}

void SimpleTaskQueue::Stub::async::TaskExitState(::grpc::ClientContext* context, const ::TaskIDReq* request, ::TaskExitStateRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TaskExitState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TaskExitStateRes>* SimpleTaskQueue::Stub::PrepareAsyncTaskExitStateRaw(::grpc::ClientContext* context, const ::TaskIDReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TaskExitStateRes, ::TaskIDReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TaskExitState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TaskExitStateRes>* SimpleTaskQueue::Stub::AsyncTaskExitStateRaw(::grpc::ClientContext* context, const ::TaskIDReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTaskExitStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::File>* SimpleTaskQueue::Stub::UploadHookRaw(::grpc::ClientContext* context, ::FileRes* response) {
  return ::grpc::internal::ClientWriterFactory< ::File>::Create(channel_.get(), rpcmethod_UploadHook_, context, response);
}

void SimpleTaskQueue::Stub::async::UploadHook(::grpc::ClientContext* context, ::FileRes* response, ::grpc::ClientWriteReactor< ::File>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::File>::Create(stub_->channel_.get(), stub_->rpcmethod_UploadHook_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::File>* SimpleTaskQueue::Stub::AsyncUploadHookRaw(::grpc::ClientContext* context, ::FileRes* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::File>::Create(channel_.get(), cq, rpcmethod_UploadHook_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::File>* SimpleTaskQueue::Stub::PrepareAsyncUploadHookRaw(::grpc::ClientContext* context, ::FileRes* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::File>::Create(channel_.get(), cq, rpcmethod_UploadHook_, context, response, false, nullptr);
}

::grpc::ClientReader< ::File>* SimpleTaskQueue::Stub::DownloadLogRaw(::grpc::ClientContext* context, const ::TaskIDReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::File>::Create(channel_.get(), rpcmethod_DownloadLog_, context, request);
}

void SimpleTaskQueue::Stub::async::DownloadLog(::grpc::ClientContext* context, const ::TaskIDReq* request, ::grpc::ClientReadReactor< ::File>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::File>::Create(stub_->channel_.get(), stub_->rpcmethod_DownloadLog_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::File>* SimpleTaskQueue::Stub::AsyncDownloadLogRaw(::grpc::ClientContext* context, const ::TaskIDReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::File>::Create(channel_.get(), cq, rpcmethod_DownloadLog_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::File>* SimpleTaskQueue::Stub::PrepareAsyncDownloadLogRaw(::grpc::ClientContext* context, const ::TaskIDReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::File>::Create(channel_.get(), cq, rpcmethod_DownloadLog_, context, request, false, nullptr);
}

SimpleTaskQueue::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::LoginReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::LoginReq* req,
             ::ExitRes* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::Inquiry, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Inquiry* req,
             ::ExitRes* resp) {
               return service->Logout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::QueueReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::QueueReq* req,
             ::ExitRes* resp) {
               return service->CreateQueue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::QueueReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::QueueReq* req,
             ::ExitRes* resp) {
               return service->DeleteQueue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::Inquiry, ::ListQueueRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Inquiry* req,
             ::ListQueueRes* resp) {
               return service->ListQueue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::AddTaskReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AddTaskReq* req,
             ::ExitRes* resp) {
               return service->AddTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::TaskIDReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TaskIDReq* req,
             ::ExitRes* resp) {
               return service->DeleteTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::QueueReq, ::ListTaskRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::QueueReq* req,
             ::ListTaskRes* resp) {
               return service->ListTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::TaskIDReq, ::TaskStateRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TaskIDReq* req,
             ::TaskStateRes* resp) {
               return service->TaskState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::QueueReq, ::TaskStateRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::QueueReq* req,
             ::TaskStateRes* resp) {
               return service->CurrentRunning(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::QueueReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::QueueReq* req,
             ::ExitRes* resp) {
               return service->StopCurrent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::QueueReq, ::ExitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::QueueReq* req,
             ::ExitRes* resp) {
               return service->StopAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::QueueReq, ::CurrentTaskOutputRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::QueueReq* req,
             ::CurrentTaskOutputRes* resp) {
               return service->CurrentTaskOutput(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::QueueReq, ::ListTaskRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::QueueReq* req,
             ::ListTaskRes* resp) {
               return service->ListExitedTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleTaskQueue::Service, ::TaskIDReq, ::TaskExitStateRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TaskIDReq* req,
             ::TaskExitStateRes* resp) {
               return service->TaskExitState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[15],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< SimpleTaskQueue::Service, ::File, ::FileRes>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::File>* reader,
             ::FileRes* resp) {
               return service->UploadHook(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleTaskQueue_method_names[16],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SimpleTaskQueue::Service, ::TaskIDReq, ::File>(
          [](SimpleTaskQueue::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TaskIDReq* req,
             ::grpc::ServerWriter<::File>* writer) {
               return service->DownloadLog(ctx, req, writer);
             }, this)));
}

SimpleTaskQueue::Service::~Service() {
}

::grpc::Status SimpleTaskQueue::Service::Login(::grpc::ServerContext* context, const ::LoginReq* request, ::ExitRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::Logout(::grpc::ServerContext* context, const ::Inquiry* request, ::ExitRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::CreateQueue(::grpc::ServerContext* context, const ::QueueReq* request, ::ExitRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::DeleteQueue(::grpc::ServerContext* context, const ::QueueReq* request, ::ExitRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::ListQueue(::grpc::ServerContext* context, const ::Inquiry* request, ::ListQueueRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::AddTask(::grpc::ServerContext* context, const ::AddTaskReq* request, ::ExitRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::DeleteTask(::grpc::ServerContext* context, const ::TaskIDReq* request, ::ExitRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::ListTask(::grpc::ServerContext* context, const ::QueueReq* request, ::ListTaskRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::TaskState(::grpc::ServerContext* context, const ::TaskIDReq* request, ::TaskStateRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::CurrentRunning(::grpc::ServerContext* context, const ::QueueReq* request, ::TaskStateRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::StopCurrent(::grpc::ServerContext* context, const ::QueueReq* request, ::ExitRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::StopAll(::grpc::ServerContext* context, const ::QueueReq* request, ::ExitRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::CurrentTaskOutput(::grpc::ServerContext* context, const ::QueueReq* request, ::CurrentTaskOutputRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::ListExitedTask(::grpc::ServerContext* context, const ::QueueReq* request, ::ListTaskRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::TaskExitState(::grpc::ServerContext* context, const ::TaskIDReq* request, ::TaskExitStateRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::UploadHook(::grpc::ServerContext* context, ::grpc::ServerReader< ::File>* reader, ::FileRes* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleTaskQueue::Service::DownloadLog(::grpc::ServerContext* context, const ::TaskIDReq* request, ::grpc::ServerWriter< ::File>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


